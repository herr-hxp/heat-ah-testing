heat_template_version: 2017-02-24

description: >
  A stack containing a server that is automatically replaced if it is stopped,
  deleted, or goes into an error state, using an Aodh alarm delivered to a
  Zaqar queue that triggers a Mistral workflow. This may be either be used
  standalone, or as the scaled unit of a scaling group. When using this from
  inside another template, the 'root_stack_id' parameter should be passed to
  indicate at which stack the stack update should commence after marking the
  server as failed. This should be the root-level stack, to ensure that any
  other resources depending on outputs from this stack are also updated. Note
  that this requires event alarms to be enabled in Aodh, following the
  instructions at
  https://docs.openstack.org/aodh/latest/contributor/event-alarm.html#configuration
  (specifically, by adding the publisher "notifier://?topic=alarm.all" in
  /etc/ceilometer/event_pipeline.yaml).

parameters:
  flavor:
    type: string
    description: Flavor for the instances to be created
    default: 07905559-28c3-41f2-b6a8-90ec6c21bd25
    constraints:
      - custom_constraint: nova.flavor
        description: Must be a flavor known to Nova
  image:
    type: string
    description: >
      Name or ID of the image to use for the instances.
    default: 1525aeac-1a8e-4696-b715-f8f9ffa8f0b9
    constraints:
      - custom_constraint: glance.image
        description: Must identify an image known to Glance
  network:
    type: string
    description: The network for the VM
    default: d5b4b0d4-5d1d-4407-b37e-378962e53c5f
  port:
    type: number
    description: The port to reply to requests on
    default: 8080
  sg:
    type: string
    description: List of security groups names or IDs.
    default: bastion
  name:
    type: string
    description: Server name.
    default: ahstack-server
  key:
    type: string
    description: Name of keypair to inject into the server.
    default: micke
  root_stack_id:
    type: string
    default: ""

conditions:
  is_standalone: {equals: [{get_param: root_stack_id}, ""]}

resources:
  server:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      networks:
       - network: {get_param: network}
      key_name: {get_param: key}
      name: {get_param: name}
      security_groups: {get_param: sg}
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #! /bin/sh -v
            Body=$(hostname)
            Response="HTTP/1.1 200 OK\r\nContent-Length: ${#Body}\r\n\r\n$Body"
            while true ; do echo -e $Response | nc -llp %PORT%; done
          params:
            "%PORT%": {get_param: port}

outputs:
  OS::stack_id:
    description: The server UUID
    value: {get_resource: server}
    condition: {not: is_standalone}
  first_address:
    description: The server IP address
    value: {get_attr: [server, first_address]}
